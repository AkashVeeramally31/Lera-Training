Methods in Streams:-
#1
filter() method:-
filter method needs an object as a parameter of type Predicate.
Predicate is an interface that contains a method called test which returns a boolean value.
When you apply the filter method on a value, if it satisfies the condition then it goes further otherwise stops.

#2
map() method:-
Map needs an object of a functional and it is a functional interface.
It contains a method called apply(). In apply method, we can do the desired operation on a value.
Function takes two types, one what is accepted and the other that it returns.

#3
reduce() method:-
Reduce method takes two parameters, one is the type and the second is the BinaryOperator for operation.
BinaryOperator extends the BiFunction and it calls a method to apply.

#4
sorted() and parallelStream() method:-
By using the sorted() method with a stream, it will return a sorted stream.
There is a method called parallelStream() used with the filter that creates multiple threads to work faster.
parallelStream should not be used with a sorted method as sorting requires all the elements together, so there multiple threads will create an ambiguity.

Features of Streams:-

1. Functional Programming Approach:-
Streams use lambda expressions and functional-style operations to process data declaratively, making the code concise and readable.

2. Lazy Evaluation:-
Streams are lazy, meaning that intermediate operations (map(), filter(), etc.) do not execute until a terminal operation (collect(), forEach(), etc.) is called.

3. Immutability (Does Not Modify Source Data):-
Streams do not modify the original data source; instead, they create new collections.

4. Pipelining (Method Chaining):-
Streams support method chaining, allowing multiple operations to be combined in a pipeline.
Example:- 
// Filtering, Mapping, and Collecting in one pipeline
        List<Integer> result = numbers.stream()
                                      .filter(n -> n % 2 == 0)  // Keep even numbers
                                      .map(n -> n * 2)          // Double each value
                                      .collect(Collectors.toList());

5. Parallel Execution (Parallel Streams):-
Streams can execute operations in parallel using parallelStream(), improving performance on large datasets.



Collecting Results (Collectors Class):-
Collectors provides useful methods to collect stream elements into various data structures.

a) Collecting to List/Set:-
List<String> namesList = names.stream().collect(Collectors.toList());
Set<String> namesSet = names.stream().collect(Collectors.toSet());

b) Collecting to Map:-
List<String> words = Arrays.asList("apple", "banana", "cherry");
Map<String, Integer> wordLengthMap = words.stream()
    .collect(Collectors.toMap(word -> word, word -> word.length()));
System.out.println(wordLengthMap);

c) Grouping Elements:-
Map<Boolean, List<Integer>> oddEvenMap = numbers.stream()
    .collect(Collectors.partitioningBy(n -> n % 2 == 0));
System.out.println(oddEvenMap);